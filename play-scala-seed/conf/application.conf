# https://www.playframework.com/documentation/2.6.x/SettingsJDBC
# https://www.playframework.com/documentation/latest/Configuration

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.

# application.secret="cre-serect"
# application.secret=${?APP_SECRET}

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# evolutionplugin=disabled
applyEvolutions.default=true

play.evolutions {
  # You can disable evolutions for a specific datasource if necessary
  #db.default.enabled = false
}

## Database Connection Pool
# https://www.playframework.com/documentation/latest/SettingsJDBC
# ~~~~~
# Play doesn't require a JDBC database to run, but you can easily enable one.
#
# libraryDependencies += jdbc
#
play.db {
  # The combination of these two settings results in "db.default" as the
  # default JDBC pool:
  #config = "db"
  #default = "default"

  # Play uses HikariCP as the default connection pool.  You can override
  # settings by changing the prototype:
  prototype {
    # Sets a fixed JDBC connection pool size of 50
    #hikaricp.minimumIdle = 50
    #hikaricp.maximumPoolSize = 50
  }
}

## JDBC Datasource
# https://www.playframework.com/documentation/latest/JavaDatabase
# https://www.playframework.com/documentation/latest/ScalaDatabase
# ~~~~~
# Once JDBC datasource is set up, you can work with several different
# database options:
#
# Slick (Scala preferred option): https://www.playframework.com/documentation/latest/PlaySlick
# JPA (Java preferred option): https://playframework.com/documentation/latest/JavaJPA
# EBean: https://playframework.com/documentation/latest/JavaEbean
# Anorm: https://www.playframework.com/documentation/latest/ScalaAnorm
#
db {
  # You can declare as many datasources as you want.
  # By convention, the default datasource is named `default`

  # https://www.playframework.com/documentation/latest/Developing-with-the-H2-Database
  # default.driver = org.postgresql.Driver
  # default.url = "jdbc:h2:mem:play"
  # default.url = "jdbc:postgresql://localhost:5432/postgres"
  # default.username = "postgres"
  # default.password = "postgres"

  # You can turn on SQL logging for any datasource
  # https://www.playframework.com/documentation/latest/Highlights25#Logging-SQL-statements
  #default.logSql=true
}

# db {
#   default {
#     driver          = org.postgresql.Driver
#     poolInitialSize = 1

#     poolMaxSize     = 20
#     poolMaxSize     = ${?DATABASE_POOL_MAXSIZE}
#     url             = "postgres://postgres:postgres@localhost:5543/postgres"
#   }
# }

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.postgresql.Driver
# db.default.url="jdbc:postgresql://localhost/postgres"
# db.default.url="postgres://postgres:postgres@localhost:5543/postgres"
# db.default.url=${?DATABASE_URL}
#
# You can expose this datasource via JNDI if needed (Useful for JPA)
# db.default.jndiName=DefaultDS

# db.default.driver=org.postgresql.Driver
# db.default.url="jdbc:postgresql://database.example.com/playdb"
# db.default.url="postgres://postgres:postgres@localhost:5543/postgres"

# slick.dbs.default.driver="slick.driver.H2Driver$"
# slick.dbs.default.db.profile="org.h2.Driver"
# slick.dbs.default.db.url="jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"

# slick.dbs.default = {
#   driver = "slick.driver.H2Driver$"
#   db {
#     # url = "jdbc:h2:mem:play;MODE=MSSQLServer;DB_CLOSE_DELAY=-1"
#     url = "jdbc:h2:mem:play;DB_CLOSE_DELAY=-1"
#     driver = org.h2.Driver
#     connectionTimeout = 30 second
#     connectionTestQuery = "SELECT 1"
#     connectionPool = "disabled"
#     keepAliveConnection = true
#   }
# }

slick.dbs.default = {
  driver = "slick.driver.PostgresDriver$"
  db {
    url = "jdbc:postgresql://localhost:5432/postgres"
    driver ="org.postgresql.Driver"
    user = "postgres"
    password = ""

    connectionTimeout = 30 second
    connectionTestQuery = "SELECT 1"
    connectionPool = "disabled"
    keepAliveConnection = true
  }
}

# slick.dbs.default.driver="slick.driver.PostgresDriver$"
# slick.dbs.default.url="jdbc:postgresql://localhost:5432/postgres"
# slick.dbs.default.user="postgres"
# slick.dbs.default.password="postgres"

# slick.dbs.default.profile="slick.jdbc.PostgresProfile$"
# slick.dbs.default.driver="slick.driver.PostgresDriver$"
# slick.dbs.default.db.driver="org.postgresql.Driver"
# slick.dbs.default.db.url="jdbc:postgresql://localhost:5432/postgres"
# slick.dbs.default.db.user=postgres
# slick.dbs.default.db.password=postgres

# The application languages
# ~~~~~
application.langs="en"

# Global object class
# ~~~~~
# Define the Global object class for this application.
# Default to Global in the root package.
# application.global=Global

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `conf/my.application.Router`,
# you may need to define a router file `my.application.routes`.
# Default to Routes in the root package (and `conf/routes`)
# application.router=my.application.Routes

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.

# Root logger:
# logger.root=ERROR

# Logger used by the framework:
# logger.play=INFO

# Logger provided to your application:
# logger.application=DEBUG